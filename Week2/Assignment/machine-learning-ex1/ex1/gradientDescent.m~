function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
	% h(x) = [X * theta] (m*1 matrix)	
	prediction = X * theta;
	% [h(x) - y] (m*1 matrix)
	er = prediction - y;
	% (1/m)[er' * X] (er' = 1*m matrix) (X = m*2 matrix) (delta = er'*X = 1*2 matrix)
	delta = (1/m)*(er' * X);
	% theta = 2*1 matrix
	theta = theta - (alpha * delta)';
	


    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);
    disp(J_history(iter));

end

end
